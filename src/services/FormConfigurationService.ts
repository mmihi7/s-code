
import { supabase } from "@/lib/supabaseClient";
import { toast } from "@/components/ui/use-toast";

// Type definition for the visitor field
export type VisitorField = {
  id: number;
  name: string;
  label: string;
  required: boolean;
  visible: boolean;
  premium: boolean;
  autoGenerated?: boolean;
  custom?: boolean;
  type?: 'text' | 'email' | 'tel' | 'textarea' | 'photo';
};

/**
 * Save form configuration to the database
 * This function updates or creates a new QR code form configuration
 */
export const saveFormConfiguration = async (
  premiseId: string, 
  formFields: VisitorField[]
): Promise<{ success: boolean; message: string }> => {
  try {
    if (!premiseId) {
      return { success: false, message: "Premise ID is required" };
    }

    // Check if a form configuration already exists for this premise
    const { data: existingForms, error: fetchError } = await supabase
      .from("qrcode_forms")
      .select("id, iteration")
      .eq("premise_id", premiseId)
      .order("iteration", { ascending: false })
      .limit(1);

    if (fetchError) {
      console.error("Error fetching existing form:", fetchError);
      return { success: false, message: "Failed to check for existing form configuration" };
    }

    let nextIteration = 1;
    let formId = null;

    if (existingForms && existingForms.length > 0) {
      nextIteration = (existingForms[0].iteration || 0) + 1;
      formId = existingForms[0].id;
    }

    // If we have an existing form, update it instead of creating a new one
    if (formId) {
      const { error: updateError } = await supabase
        .from("qrcode_forms")
        .upsert({
          id: formId,
          premise_id: premiseId,
          form_fields: formFields,
          iteration: nextIteration,
          generated_at: new Date().toISOString()
        });

      if (updateError) {
        console.error("Error updating form configuration:", updateError);
        return { success: false, message: "Failed to save form configuration: " + updateError.message };
      }
    } else {
      // Create a new form configuration
      const { error: insertError } = await supabase
        .from("qrcode_forms")
        .insert({
          premise_id: premiseId,
          form_fields: formFields,
          iteration: nextIteration,
          generated_at: new Date().toISOString()
        });

      if (insertError) {
        console.error("Error creating form configuration:", insertError);
        return { success: false, message: "Failed to create form configuration: " + insertError.message };
      }
    }

    // Update the premise's visitor_fields column as well for consistency
    const { error: premiseUpdateError } = await supabase
      .from("premises")
      .update({ visitor_fields: formFields })
      .eq("id", premiseId);

    if (premiseUpdateError) {
      console.error("Error updating premise visitor fields:", premiseUpdateError);
      // Not returning an error here as the main operation succeeded
    }

    return { success: true, message: "Form configuration saved successfully" };
  } catch (error) {
    console.error("Unexpected error saving form configuration:", error);
    return { success: false, message: "An unexpected error occurred while saving the form configuration" };
  }
};

/**
 * Load form configuration from the database
 */
export const loadFormConfiguration = async (premiseId: string): Promise<VisitorField[] | null> => {
  try {
    if (!premiseId) {
      return null;
    }

    // First try to get the most recent form from qrcode_forms
    const { data: formData, error: formError } = await supabase
      .from("qrcode_forms")
      .select("form_fields")
      .eq("premise_id", premiseId)
      .order("iteration", { ascending: false })
      .limit(1);

    if (formError) {
      console.error("Error fetching form configuration:", formError);
      // Fall back to premise visitor_fields if there's an error
    } else if (formData && formData.length > 0 && formData[0].form_fields) {
      // Parse and return the form fields
      const fields = formData[0].form_fields;
      return Array.isArray(fields) 
        ? fields as VisitorField[]
        : JSON.parse(fields as string) as VisitorField[];
    }

    // Fallback: Try to get visitor_fields from the premise record
    const { data: premiseData, error: premiseError } = await supabase
      .from("premises")
      .select("visitor_fields")
      .eq("id", premiseId)
      .single();

    if (premiseError || !premiseData) {
      console.error("Error fetching premise data:", premiseError);
      return null;
    }

    if (premiseData.visitor_fields) {
      const fields = premiseData.visitor_fields;
      return Array.isArray(fields) 
        ? fields as VisitorField[]
        : JSON.parse(fields as string) as VisitorField[];
    }

    // Return default fields if nothing is found
    return getDefaultFormFields();
  } catch (error) {
    console.error("Unexpected error loading form configuration:", error);
    return null;
  }
};

/**
 * Get default form fields for new premises
 */
export const getDefaultFormFields = (): VisitorField[] => {
  return [
    { id: 1, name: "name", label: "Full Name", required: true, visible: true, premium: false },
    { id: 2, name: "phone", label: "Phone Number", required: true, visible: true, premium: false },
    { id: 3, name: "idnumber", label: "ID Number", required: true, visible: true, premium: false },
    { id: 4, name: "email", label: "Email Address", required: false, visible: true, premium: false },
    { id: 5, name: "photo", label: "Photo", required: false, visible: false, premium: true, type: "photo" },
    { id: 6, name: "purpose", label: "Purpose of Visit", required: true, visible: true, premium: false },
    { id: 7, name: "department", label: "Department", required: true, visible: true, premium: false },
    { id: 8, name: "visitingperson", label: "Person to Visit", required: true, visible: true, premium: false },
    { id: 9, name: "vehicle", label: "Vehicle Registration", required: false, visible: true, premium: false }
  ];
};
