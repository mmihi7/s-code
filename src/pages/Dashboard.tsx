import React, { useState, useEffect } from "react";
import MainLayout from "@/components/layout/MainLayout";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Building,
  QrCode as QrCodeIcon,
  Users,
  Settings as SettingsIcon,
  Download,
  BarChart3,
  CheckCircle2,
  UserCheck,
  Sparkles,
  Camera,
  FileText,
  UserRoundCog,
  Car,
  IdCard,
  Mail,
  Phone,
  RefreshCcw,
  Trash2
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { supabase } from "@/lib/supabaseClient";
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion";
import QRCode from "react-qr-code";
import { useNavigate } from "react-router-dom";

type VisitorField = {
  id: number;
  name: string;
  label: string;
  required: boolean;
  visible: boolean;
  premium: boolean;
  autoGenerated?: boolean;
  custom?: boolean;
};

const defaultVisitorFields: VisitorField[] = [
  { id: 1, name: "name", label: "Full Name", required: true, visible: true, premium: false },
  { id: 2, name: "phone", label: "Phone Number", required: false, visible: false, premium: false },
  { id: 3, name: "signature", label: "Digital Signature", required: false, visible: true, premium: false, autoGenerated: true },
  { id: 4, name: "idnumber", label: "ID Number", required: false, visible: false, premium: false },
  { id: 5, name: "email", label: "Email Address", required: false, visible: false, premium: false },
  { id: 6, name: "facephoto", label: "Face Photo", required: false, visible: false, premium: true },
  { id: 7, name: "idphoto", label: "ID Photo", required: false, visible: false, premium: true },
  { id: 8, name: "purpose", label: "Purpose of Visit", required: false, visible: false, premium: true },
  { id: 9, name: "department", label: "Department", required: false, visible: false, premium: true },
  { id: 10, name: "visitingperson", label: "Person Being Visited", required: false, visible: false, premium: true },
  { id: 11, name: "vehicle", label: "Vehicle Registration Number", required: false, visible: false, premium: true },
];

const Dashboard = () => {
  const [currentPlan] = useState("Basic");
  const { toast } = useToast();
  const navigate = useNavigate();

  const [premiseName, setPremiseName] = useState<string | null>(null);
  const [premiseId, setPremiseId] = useState<string | null>(null);
  const [visitorFields, setVisitorFields] = useState<VisitorField[]>(defaultVisitorFields);
  const [saving, setSaving] = useState(false);
  const [qrGenerated, setQrGenerated] = useState(false);
  const [qrValue, setQrValue] = useState<string | null>(null);
  const [iteration, setIteration] = useState<number>(1);
  const [customQuestion, setCustomQuestion] = useState("");
  const [visitors, setVisitors] = useState<any[]>([]);

  // --- Settings Tab State ---
  const [approvalType, setApprovalType] = useState<"security" | "reception" | "host">("security");
  const [ussdOption, setUssdOption] = useState(false);
  const [settingsSaving, setSettingsSaving] = useState(false);

  // Fetch config and QR codes from Supabase
  const fetchConfig = async () => {
    const premise_id = localStorage.getItem("premise_id");
    if (!premise_id) return;
    // Fetch premise name
    const { data: premiseData, error: premiseError } = await supabase
      .from("premises")
      .select("name")
      .eq("id", premise_id)
      .single();
    if (!premiseError && premiseData) setPremiseName(premiseData.name);

    // Fetch QR config
    const { data: formData, error: formError } = await supabase
      .from("qrcode_forms")
      .select("form_fields,qrcode_url,iteration")
      .eq("premise_id", premise_id)
      .single();
    if (!formError && formData) {
      if (formData.qrcode_url) {
        setQrValue(formData.qrcode_url);
        setQrGenerated(true);
      } else {
        setQrValue(null);
        setQrGenerated(false);
      }
      setIteration(formData.iteration || 1);
    } else {
      setQrValue(null);
      setQrGenerated(false);
      setIteration(1);
    }
  };

  const fetchVisitors = async () => {
    const premise_id = localStorage.getItem("premise_id");
    if (!premise_id) return;
    const { data, error } = await supabase
      .from("visitors")
      .select("*")
      .eq("premise_id", premise_id)
      .order("checked_in_at", { ascending: false });
    console.log("Fetched visitors:", data, "Error:", error, "Premise ID:", premise_id);
    if (!error && data) setVisitors(data);
  };

  useEffect(() => {
    setPremiseId(localStorage.getItem("premise_id"));
    fetchConfig();
    fetchVisitors();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Handlers for toggling visible/required
  const handleToggleVisible = (id: number) => {
    setVisitorFields(fields =>
      fields.map(field =>
        field.id === id
          ? {
              ...field,
              visible: !field.visible,
              required: field.visible ? false : field.required,
            }
          : field
      )
    );
  };

  const handleToggleRequired = (id: number) => {
    setVisitorFields(fields =>
      fields.map(field =>
        field.id === id && field.visible
          ? { ...field, required: !field.required }
          : field
      )
    );
  };

  // Download QR code as PNG (single-entry)
  const handleDownloadQR = () => {
    if (!qrGenerated || !qrValue) return;
    const svg = document.getElementById("premise-qr-svg");
    if (!svg) return;
    const serializer = new XMLSerializer();
    const source = serializer.serializeToString(svg);
    const img = new Image();
    img.src = "data:image/svg+xml;base64," + window.btoa(source);
    img.onload = function () {
      const canvas = document.createElement("canvas");
      canvas.width = 512;
      canvas.height = 512;
      const ctx = canvas.getContext("2d");
      if (ctx) {
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        const pngFile = canvas.toDataURL("image/png");
        const a = document.createElement("a");
        a.href = pngFile;
        a.download = "premise-qr-code.png";
        a.click();
      }
    };
  };

  // Generate or regenerate the QR code for the premise (upsert with iteration increment)
  const handleGenerateOrRegenerateQRCode = async () => {
    setSaving(true);
    try {
      const premiseId = localStorage.getItem("premise_id");
      if (!premiseId) {
        toast({
          title: "Error",
          description: "Premise ID not found.",
          variant: "destructive"
        });
        setSaving(false);
        return;
      }
      const baseUrl = window.location.origin + "/entry";
      const qrUrl = `${baseUrl}?premise_id=${encodeURIComponent(premiseId)}`;
      setQrValue(qrUrl);
      setQrGenerated(true);

      // Fetch current iteration
      const { data: existing, error: fetchError } = await supabase
        .from("qrcode_forms")
        .select("iteration")
        .eq("premise_id", premiseId)
        .single();

      const newIteration = existing && existing.iteration ? existing.iteration + 1 : 1;

      // Only save visible fields
      const visibleFields = visitorFields.filter(f => f.visible);

      // Upsert (insert or update) QR code config
      const upsertRow = {
        premise_id: premiseId,
        qrcode_url: qrUrl,
        generated_at: new Date().toISOString(),
        form_fields: visibleFields, // Only visible fields saved
        iteration: newIteration,
      };
      const { error } = await supabase
        .from("qrcode_forms")
        .upsert([upsertRow], { onConflict: "premise_id" });

      if (error) {
        toast({
          title: "Failed to save QR code",
          description: error.message,
          variant: "destructive",
        });
      } else {
        setIteration(newIteration);
        toast({
          title: "QR code saved!",
          description: `Premise QR code has been saved. Version: ${newIteration}`,
        });
      }
    } finally {
      setSaving(false);
    }
  };

  // Delete the QR code for the premise (delete row in Supabase)
  const handleDeleteQRCode = async () => {
    setSaving(true);
    try {
      const premiseId = localStorage.getItem("premise_id");
      if (!premiseId) {
        toast({
          title: "Error",
          description: "Premise ID not found.",
          variant: "destructive"
        });
        setSaving(false);
        return;
      }
      // Delete the QR code row from Supabase
      const { error } = await supabase
        .from("qrcode_forms")
        .delete()
        .eq("premise_id", premiseId);

      if (error) {
        toast({
          title: "Failed to delete QR code",
          description: error.message,
          variant: "destructive",
        });
      } else {
        setQrValue(null);
        setQrGenerated(false);
        setIteration(1);
        toast({
          title: "QR code deleted!",
          description: "Premise QR code has been deleted.",
        });
      }
    } finally {
      setSaving(false);
    }
  };

  // Approve entry for a visitor
  const handleApproveEntry = async (visitorId: string) => {
    const now = new Date().toISOString();
    const { error } = await supabase
      .from("visitors")
      .update({ 
        status: "approved", 
        entry_approved_at: now, 
        checked_in_at: now, 
        denied_at: null, 
        denial_reason: null 
      })
      .eq("id", visitorId);
    if (!error) {
      fetchVisitors();
      toast({
        title: "Entry Approved",
        description: "Visitor entry has been approved.",
      });
    } else {
      toast({
        title: "Error",
        description: "Failed to approve entry.",
        variant: "destructive",
      });
    }
  };

  // Deny entry for a visitor
  const handleDenyEntry = async (visitorId: string, denialReason = "Not specified") => {
    const now = new Date().toISOString();
    const { error } = await supabase
      .from("visitors")
      .update({ 
        status: "denied", 
        denied_at: now, 
        entry_approved_at: null, 
        checked_in_at: null, 
        denial_reason: denialReason 
      })
      .eq("id", visitorId);
    if (!error) {
      fetchVisitors();
      toast({
        title: "Entry Denied",
        description: "Visitor has been denied entry.",
        variant: "destructive",
      });
    } else {
      toast({
        title: "Error",
        description: "Failed to deny entry.",
        variant: "destructive",
      });
    }
  };

  // Manual check out handler (Exit)
  const handleManualCheckout = async (visitorId: string) => {
    const now = new Date().toISOString();
    const { error } = await supabase
      .from("visitors")
      .update({ 
        status: "exited", 
        checked_out_at: now 
      })
      .eq("id", visitorId);
    if (!error) {
      fetchVisitors(); // Refresh the list
      toast({
        title: "Visitor checked out",
        description: "The visitor has been checked out successfully.",
      });
    } else {
      toast({
        title: "Error",
        description: "Failed to check out the visitor.",
        variant: "destructive",
      });
    }
  };

  // Calculate average visit time from visit_duration column (in seconds)
  const getAverageVisitTime = () => {
    const completed = visitors.filter(v => v.visit_duration != null);
    if (completed.length === 0) return "--";
    const totalSeconds = completed.reduce((sum, v) => sum + v.visit_duration, 0);
    const avgSeconds = totalSeconds / completed.length;
    const avgMinutes = Math.round(avgSeconds / 60);
    return avgMinutes > 0 ? `${avgMinutes} min` : `${Math.round(avgSeconds)} sec`;
  };

  // --- Settings Tab Handlers ---
  const handleSaveSettings = () => {
    setSettingsSaving(true);
    setTimeout(() => {
      setSettingsSaving(false);
      toast({
        title: "Settings Saved",
        description: "Your dashboard settings have been updated.",
      });
    }, 1200);
  };

  return (
    <MainLayout>
      <div className="container mx-auto p-6 pb-24">
        {premiseId && (
          <div className="text-xs text-white/60 mb-1">
            ID: {premiseId}
          </div>
        )}
        <h1 className="text-2xl font-bold mb-6">
          {premiseName ? `${premiseName} Dashboard` : "Dashboard"}
        </h1>

        <div className="grid gap-6 md:grid-cols-3 mb-6">
          <Card className="bg-secondary border-white/10">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Visitors</CardTitle>
              <div className="text-2xl font-bold">{visitors.length}</div>
            </CardHeader>
            <CardContent>
              <p className="text-xs text-white/60">+12% from last month</p>
            </CardContent>
          </Card>
          <Card className="bg-secondary border-white/10">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Active Visitors</CardTitle>
              <div className="text-2xl font-bold">
                {visitors.filter(v => !v.checked_out_at).length}
              </div>
            </CardHeader>
            <CardContent>
              <p className="text-xs text-white/60">Currently in your premise</p>
            </CardContent>
          </Card>
          <Card className="bg-secondary border-white/10">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Average Visit Time</CardTitle>
              <div className="text-2xl font-bold">{getAverageVisitTime()}</div>
            </CardHeader>
            <CardContent>
              <p className="text-xs text-white/60">
                -5% from last week
              </p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="visitors" className="space-y-4">
          <TabsList>
            <TabsTrigger value="visitors" className="flex items-center">
              <Users className="w-4 h-4 mr-2" />
              Visitors
            </TabsTrigger>
            <TabsTrigger value="qrcode" className="flex items-center">
              <QrCodeIcon className="w-4 h-4 mr-2" />
              QR Codes
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center">
              <BarChart3 className="w-4 h-4 mr-2" />
              Analytics
            </TabsTrigger>
            <TabsTrigger value="settings" className="flex items-center">
              <SettingsIcon className="w-4 h-4 mr-2" />
              Settings
            </TabsTrigger>
          </TabsList>

          {/* Visitors Tab */}
          <TabsContent value="visitors" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Recent Visitors</CardTitle>
              </CardHeader>
              <CardContent>
                <table className="min-w-full text-sm">
                  <thead>
                    <tr>
                      <th className="text-left p-2">Name</th>
                      <th className="text-left p-2">Check-in Time</th>
                      <th className="text-left p-2">Phone</th>
                      <th className="text-left p-2">Email</th>
                      <th className="text-left p-2">
                        Signature <span className="text-xs text-white/60">(Autogenerated)</span>
                      </th>
                      <th className="text-left p-2">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {visitors.map(visitor => (
                      <tr key={visitor.id}>
                        <td className="p-2">{visitor.name}</td>
                        <td className="p-2">{visitor.checked_in_at ? new Date(visitor.checked_in_at).toLocaleString() : ""}</td>
                        <td className="p-2">{visitor.phone || ""}</td>
                        <td className="p-2">{visitor.email || ""}</td>
                        <td className="p-2">
                          {visitor.signature
                            ? (
                              <span className="inline-flex items-center text-green-600 font-semibold">
                                <CheckCircle2 className="w-4 h-4 mr-1" /> Verified
                              </span>
                            )
                            : (
                              <span className="inline-flex items-center text-gray-400">
                                <CheckCircle2 className="w-4 h-4 mr-1" /> Unverified
                              </span>
                            )
                          }
                        </td>
                        <td className="p-2">
                          {visitor.denied_at ? (
                            <span className="text-red-600 font-semibold">Denied</span>
                          ) : !visitor.checked_in_at ? (
                            <>
                              <Button
                                size="sm"
                                variant="default"
                                className="bg-green-600 text-white hover:bg-green-700"
                                onClick={() => handleApproveEntry(visitor.id)}
                              >
                                Entry
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-red-600 border-red-600 hover:bg-red-600/10 ml-2"
                                onClick={() => handleDenyEntry(visitor.id)}
                              >
                                Deny
                              </Button>
                              <Button
                                size="sm"
                                variant="destructive"
                                className="ml-2"
                                disabled
                              >
                                Exit
                              </Button>
                            </>
                          ) : !visitor.checked_out_at ? (
                            <>
                              <Button
                                size="sm"
                                variant="default"
                                className="bg-green-600 text-white hover:bg-green-700"
                                disabled
                              >
                                Entry
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-red-600 border-red-600 hover:bg-red-600/10 ml-2"
                                disabled
                              >
                                Deny
                              </Button>
                              <Button
                                size="sm"
                                variant="destructive"
                                className="ml-2"
                                onClick={() => handleManualCheckout(visitor.id)}
                              >
                                Exit
                              </Button>
                            </>
                          ) : (
                            <span className="text-green-600 font-semibold">Exited</span>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* QR Code Tab */}
          <TabsContent value="qrcode" className="space-y-4">
            <div className="grid md:grid-cols-2 gap-6 h-[400px]">
              {/* LEFT: Visitor Info Config */}
              <Card className="bg-secondary border-white/10 h-full">
                <CardHeader>
                  <CardTitle className="text-xl">Visitor Information Fields</CardTitle>
                  <CardDescription>
                    Choose which information to collect from visitors for check-in.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-sm">
                        <thead>
                          <tr>
                            <th className="text-left p-2 whitespace-nowrap min-w-[160px]">Field</th>
                            <th className="text-center p-2 whitespace-nowrap">Visible</th>
                            <th className="text-center p-2 whitespace-nowrap">Required</th>
                          </tr>
                        </thead>
                        <tbody>
                          {visitorFields.map(field => (
                            <tr key={field.id} className="border-t border-white/10">
                              <td className="p-2">
                                <div className="flex items-center gap-x-3">
                                  {field.autoGenerated ? (
                                    <>
                                      <div className="w-6 h-6 rounded-full bg-green-500/10 flex items-center justify-center">
                                        <CheckCircle2 className="w-4 h-4 text-green-500" />
                                      </div>
                                      <span className="whitespace-nowrap">Digital Signature</span>
                                      <span className="ml-2 px-2 py-0.5 rounded bg-green-600 text-white text-xs whitespace-nowrap">Autogenerated</span>
                                    </>
                                  ) : (
                                    <>
                                      <div className="w-6 h-6 rounded-full bg-white/10 flex items-center justify-center">
                                        {field.name === "name" && <UserCheck className="w-4 h-4 text-white" />}
                                        {field.name === "phone" && <Phone className="w-4 h-4 text-white" />}
                                        {field.name === "idnumber" && <IdCard className="w-4 h-4 text-white" />}
                                        {field.name === "email" && <Mail className="w-4 h-4 text-white" />}
                                        {field.name === "facephoto" && <Camera className="w-4 h-4 text-white" />}
                                        {field.name === "idphoto" && <IdCard className="w-4 h-4 text-white" />}
                                        {field.name === "purpose" && <FileText className="w-4 h-4 text-white" />}
                                        {field.name === "department" && <Building className="w-4 h-4 text-white" />}
                                        {field.name === "visitingperson" && <UserRoundCog className="w-4 h-4 text-white" />}
                                        {field.name === "vehicle" && <Car className="w-4 h-4 text-white" />}
                                      </div>
                                      <span className="whitespace-nowrap">{field.label}</span>
                                    </>
                                  )}
                                </div>
                              </td>
                              <td className="p-2 text-center">
                                <Switch
                                  checked={field.visible}
                                  onCheckedChange={() => handleToggleVisible(field.id)}
                                />
                              </td>
                              <td className="p-2 text-center">
                                <Switch
                                  checked={field.required}
                                  onCheckedChange={() => handleToggleRequired(field.id)}
                                  disabled={!field.visible}
                                />
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    <Separator className="border-white/10 my-4" />
                    {/* Advanced Fields in Accordion */}
                    <Accordion type="single" collapsible>
                      <AccordionItem value="advanced">
                        <AccordionTrigger>
                          <span className="flex items-center">
                            <Sparkles className="w-4 h-4 mr-2 text-amber-500" />
                            Advanced
                          </span>
                        </AccordionTrigger>
                        <AccordionContent>
                          <div className="space-y-3">
                            {/* Custom question input row */}
                            <form
                              className="flex items-center gap-2 mb-4"
                              onSubmit={e => {
                                e.preventDefault();
                                const trimmed = customQuestion.trim();
                                if (trimmed.length === 0) return;
                                setVisitorFields(fields => [
                                  ...fields,
                                  {
                                    id: fields.length + 1,
                                    name: `custom_${Date.now()}`,
                                    label: trimmed,
                                    required: false,
                                    visible: true,
                                    premium: true,
                                    custom: true
                                  }
                                ]);
                                setCustomQuestion("");
                              }}
                            >
                              <input
                                type="text"
                                className="flex-1 p-2 rounded bg-white/10 border border-white/20 text-white"
                                placeholder="Add your own question..."
                                value={customQuestion}
                                onChange={e => setCustomQuestion(e.target.value)}
                              />
                              <Button
                                type="submit"
                                className="bg-amber-500 hover:bg-amber-600"
                                disabled={!customQuestion.trim()}
                              >
                                Add
                              </Button>
                            </form>
                            {/* List all advanced fields (premium and custom) */}
                            {visitorFields.filter(field => field.premium || field.custom).map(field => (
                              <div
                                key={field.id}
                                className="flex items-center justify-between p-3 border border-white/10 rounded-md bg-white/5 opacity-80"
                              >
                                <div className="flex items-center">
                                  <div className="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center mr-3">
                                    {field.name === "facephoto" && <Camera className="w-4 h-4 text-white" />}
                                    {field.name === "idphoto" && <IdCard className="w-4 h-4 text-white" />}
                                    {field.name === "purpose" && <FileText className="w-4 h-4 text-white" />}
                                    {field.name === "department" && <Building className="w-4 h-4 text-white" />}
                                    {field.name === "visitingperson" && <UserRoundCog className="w-4 h-4 text-white" />}
                                    {field.name === "vehicle" && <Car className="w-4 h-4 text-white" />}
                                    {field.custom && <Sparkles className="w-4 h-4 text-amber-400" />}
                                  </div>
                                  <div>
                                    <p className="font-medium">{field.label}</p>
                                    <p className="text-xs text-white/60">
                                      {field.custom ? "Custom Field" : "Advanced Field"}
                                    </p>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </div>
                </CardContent>
              </Card>

              {/* RIGHT: Single QR Code Section */}
              <Card className="bg-secondary border-white/10 flex flex-col flex-1" style={{ minHeight: 0 }}>
                <CardHeader>
                  <CardTitle className="text-xl">Premise QR Code</CardTitle>
                  <CardDescription>
                    Generate, download, or delete the QR code for your premise.
                  </CardDescription>
                </CardHeader>
                <CardContent className="flex flex-col items-center flex-1 overflow-auto" style={{ height: "70%" }}>
                  {qrValue ? (
                    <div className="flex flex-col items-center">
                      <div className="bg-white p-4 rounded-lg mb-2">
                        <QRCode
                          id="premise-qr-svg"
                          value={qrValue}
                          size={200}
                          bgColor="#FFFFFF"
                          fgColor="#000000"
                          level="Q"
                        />
                      </div>
                      <div className="font-semibold text-white/80 mb-2">
                        QR Code Version: {iteration}
                      </div>
                      <div className="flex gap-2">
                        <Button
                          onClick={handleDownloadQR}
                          className="bg-scode-blue hover:bg-scode-blue/90"
                        >
                          <Download className="mr-2 h-4 w-4" />
                          Download
                        </Button>
                        <Button
                          onClick={handleGenerateOrRegenerateQRCode}
                          className="bg-amber-600 hover:bg-amber-700"
                          disabled={saving}
                        >
                          <RefreshCcw className="mr-2 h-4 w-4" />
                          Regenerate
                        </Button>
                        <Button
                          onClick={handleDeleteQRCode}
                          className="bg-red-600 hover:bg-red-700"
                          disabled={saving}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="flex flex-col items-center">
                      <div className="text-white/60 py-8">No QR code generated yet.</div>
                      <Button
                        onClick={handleGenerateOrRegenerateQRCode}
                        className="bg-scode-blue hover:bg-scode-blue/90"
                        disabled={saving}
                      >
                        <QrCodeIcon className="mr-2 h-4 w-4" />
                        Generate QR Code
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-4">
            <Card className="bg-secondary border-white/10">
              <CardHeader>
                <CardTitle className="text-xl">Analytics</CardTitle>
                <CardDescription>
                  View visitor trends and analytics for your premise
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center text-white/60 py-12">
                  Analytics coming soon.
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Settings Tab */}
          <TabsContent value="settings" className="space-y-4">
            <Card className="bg-secondary border-white/10 w-2/3">
              <CardHeader>
                <CardTitle className="text-xl">Settings</CardTitle>
                <CardDescription>
                  Manage your premise settings
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Approval Type Radio Group */}
                  <div className="flex flex-col gap-2">
                    <span className="font-medium mb-1">Approval Required From</span>
                    <div className="flex gap-4">
                      <label className="flex items-center gap-1">
                        <input
                          type="radio"
                          name="approvalType"
                          value="security"
                          checked={approvalType === "security"}
                          onChange={() => setApprovalType("security")}
                        />
                        Security
                      </label>
                      <label className="flex items-center gap-1">
                        <input
                          type="radio"
                          name="approvalType"
                          value="reception"
                          checked={approvalType === "reception"}
                          onChange={() => setApprovalType("reception")}
                        />
                        Reception
                      </label>
                      <label className="flex items-center gap-1">
                        <input
                          type="radio"
                          name="approvalType"
                          value="host"
                          checked={approvalType === "host"}
                          onChange={() => setApprovalType("host")}
                        />
                        Host
                      </label>
                    </div>
                  </div>
                  <Separator className="border-white/10" />
                  {/* USSD Option */}
                  <div className="flex items-center justify-between">
                    <span className="font-medium">USSD Option for Non-Smartphone Check-ins</span>
                    <Switch checked={ussdOption} onCheckedChange={setUssdOption} />
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  className="bg-scode-blue hover:bg-scode-blue/90 w-full"
                  onClick={handleSaveSettings}
                  disabled={settingsSaving}
                >
                  {settingsSaving ? "Saving..." : "Save"}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </MainLayout>
  );
};

export default Dashboard;