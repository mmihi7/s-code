import React, { useState, useEffect, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import MainLayout from "@/components/layout/MainLayout";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Check, LogIn, Clock, XCircle, UserPlus, Zap } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import sha256 from "crypto-js/sha256";
import { useToast } from "@/components/ui/use-toast";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";

// Types
type VisitorField = {
  id: number;
  name: string;
  label: string;
  required: boolean;
  visible: boolean;
  premium: boolean;
  autoGenerated?: boolean;
  custom?: boolean;
  type?: 'text' | 'email' | 'tel' | 'textarea' | 'photo';
};

// --- Helpers for image upload ---
function base64ToBlob(base64: string, mime = 'image/png') {
  const byteString = atob(base64.split(',')[1]);
  const ab = new ArrayBuffer(byteString.length);
  const ia = new Uint8Array(ab);
  for (let i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i);
  }
  return new Blob([ab], { type: mime });
}

async function uploadImageToStorage(base64: string, path: string): Promise<string | null> {
  const file = base64ToBlob(base64);
  const { data, error } = await supabase.storage
    .from('user-photos')
    .upload(path, file, { upsert: true });
  if (error) {
    console.error("Upload error:", error);
    return null;
  }
  return supabase.storage.from('user-photos').getPublicUrl(path).data.publicUrl;
}

// --- PhotoInput component for capturing or uploading photos (no OCR) ---
type PhotoInputProps = {
  value: string | null;
  onChange: (val: string | null) => void;
};
const PhotoInput: React.FC<PhotoInputProps> = ({ value, onChange }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [captured, setCaptured] = useState<string | null>(value || null);

  const startCamera = async () => {
    const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });
    setStream(mediaStream);
    if (videoRef.current) videoRef.current.srcObject = mediaStream;
  };

  const capturePhoto = () => {
    if (!videoRef.current) return;
    const canvas = document.createElement("canvas");
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext("2d");
    ctx?.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);
    const dataUrl = canvas.toDataURL("image/png");
    setCaptured(dataUrl);
    onChange(dataUrl);
    stream?.getTracks().forEach(track => track.stop());
    setStream(null);
  };

  const removePhoto = () => {
    setCaptured(null);
    onChange(null);
  };

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      const dataUrl = reader.result as string;
      setCaptured(dataUrl);
      onChange(dataUrl);
    };
    reader.readAsDataURL(file);
  };

  return (
    <div>
      {!captured && (
        <div className="flex gap-2">
          {stream ? (
            <div>
              <video ref={videoRef} autoPlay width={200} height={150}></video>
              <Button type="button" onClick={capturePhoto} className="mt-2 w-full">Capture</Button>
            </div>
          ) : (
            <Button type="button" onClick={startCamera} className="w-full">Open Camera</Button>
          )}
          <input type="file" accept="image/*" onChange={handleFileUpload} className="ml-2" />
        </div>
      )}
      {captured && (
        <div>
          <img src={captured} alt="Captured" width={200} className="mb-2" />
          <Button type="button" onClick={removePhoto} variant="secondary" className="w-full mb-2">Remove</Button>
        </div>
      )}
    </div>
  );
};

const VisitorEntry = () => {
  const location = useLocation();
  const query = new URLSearchParams(location.search);
  const premise_id = query.get("premise_id");
  const [premiseFields, setPremiseFields] = useState<VisitorField[]>([]);
  const [formData, setFormData] = useState<Record<string, any>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [visitorId, setVisitorId] = useState<string | null>(null);
  const [visitorStatus, setVisitorStatus] = useState<'pending' | 'approved' | 'denied' | null>(null);
  const [denialReason, setDenialReason] = useState<string | null>(null);
  const navigate = useNavigate();
  const { toast } = useToast();
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [privacyAccepted, setPrivacyAccepted] = useState(false);
  const [signatureGenerated, setSignatureGenerated] = useState(false);
  const [premise, setPremise] = useState<{ name: string } | null>(null);
  const [showPendingModal, setShowPendingModal] = useState(false);
  const [hasActiveVisit, setHasActiveVisit] = useState(false);
  const [activeVisitId, setActiveVisitId] = useState<string | null>(null);

  // Validate QR code and fetch premise fields
  useEffect(() => {
    const validateQRCode = async () => {
      try {
        setIsLoading(true);
        setError(null);

        if (!premise_id) {
          setError("Invalid QR code. Please scan a valid premise QR code.");
          return;
        }

        // Check authentication status first
        const { data: { session } } = await supabase.auth.getSession();
        setIsAuthenticated(!!session);

        // Fetch QR code configuration and premise details
        const [{ data: qrConfig, error: qrError }, { data: premise, error: premiseError }] = await Promise.all([
          supabase
            .from("qrcode_forms")
            .select("premise_id, form_fields, iteration")
            .eq("premise_id", premise_id)
            .single(),
          supabase
            .from("premises")
            .select("name")
            .eq("id", premise_id)
            .single()
        ]);

        if (qrError || !qrConfig) {
          console.error('QR Config error:', qrError);
          setError("Invalid QR code. This premise does not exist or has no active QR code.");
          return;
        }

        if (premise) {
          setPremise(premise);
        }

        console.log('QR Config received:', qrConfig);

        // Parse form fields
        const fields = Array.isArray(qrConfig.form_fields) 
          ? qrConfig.form_fields 
          : JSON.parse(qrConfig.form_fields);

        console.log('Parsed form fields:', fields);
        setPremiseFields(fields);

        // If authenticated, fetch user profile and compare with required fields
        if (session?.user) {
          // Check if user has an active visit at this premise
          const { data: activeVisit, error: activeVisitError } = await supabase
            .from('visitors')
            .select('id')
            .eq('user_id', session.user.id)
            .eq('premise_id', premise_id)
            .eq('status', 'active')
            .maybeSingle();
          
          if (activeVisit) {
            setHasActiveVisit(true);
            setActiveVisitId(activeVisit.id);
            toast({
              title: "Active Visit Detected",
              description: "You have an active visit at this premise that hasn't been checked out.",
              variant: "default"
            });
          }

          const { data: profile } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', session.user.id)
            .single();

          if (profile) {
            // Map profile data to form fields
            const profileData = {
              name: profile.full_name || '',
              phone: profile.phone || '',
              idnumber: profile.idnumber || '',
              email: profile.email || session.user.email || '',
              photo: profile.photo || '',
              // Add any other standard profile fields here
            };

            // Check which required fields are missing from profile
            const missingFields = fields
              .filter(field => field.visible && field.required)
              .filter(field => !profileData[field.name] || profileData[field.name] === '');

            console.log('Missing required fields for authenticated user:', missingFields);

            // Initialize form data with profile data
            const initialFormData = fields.reduce((acc: Record<string, any>, field: VisitorField) => {
              if (field.visible) {
                // Use profile data if available, otherwise empty string
                acc[field.name] = profileData[field.name] || '';
              }
              return acc;
            }, {});

            setFormData(initialFormData);

            // Show notification if additional fields are required
            if (missingFields.length > 0) {
              toast({
                title: "⚠️ Additional Information Required",
                description: `Please provide: ${missingFields.map(f => f.label).join(', ')}`,
                variant: "default"
              });
            }
          }
        } else {
          // For non-authenticated users, initialize empty form
          const initialFormData = fields.reduce((acc: Record<string, any>, field: VisitorField) => {
            if (field.visible) {
              acc[field.name] = '';
            }
            return acc;
          }, {});
          setFormData(initialFormData);
        }

      } catch (error) {
        console.error('Error validating QR code:', error);
        setError("An error occurred while validating the QR code. Please try again.");
      } finally {
        setIsLoading(false);
      }
    };

    validateQRCode();
  }, [premise_id, toast]);

  // Check entry status periodically
  useEffect(() => {
    let statusCheckInterval: NodeJS.Timeout;

    const checkStatus = async () => {
      if (visitorId) {
        const { data, error } = await supabase
          .from('pending_entries')
          .select('status, message')
          .eq('id', visitorId)
          .single();

        if (error) {
          console.error('Error checking status:', error);
          return;
        }

        if (data) {
          setVisitorStatus(data.status);
          if (data.message) {
            toast({
              title: data.status === 'approved' ? "Entry Approved" : "Status Update",
              description: data.message
            });
          }
        }
      }
    };

    if (visitorId && visitorStatus === 'pending') {
      // Check immediately
      checkStatus();
      // Then check every 5 seconds
      statusCheckInterval = setInterval(checkStatus, 5000);
    }

    return () => {
      if (statusCheckInterval) {
        clearInterval(statusCheckInterval);
      }
    };
  }, [visitorId, visitorStatus, supabase]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitting(true);
    
    try {
      // Get current user session
      const { data: { session } } = await supabase.auth.getSession();
      const isAuthenticated = !!session?.user;

      // Validation checks
      if (!premise_id) {
        throw new Error("No premise ID found");
      }

      if (!formData.name?.trim()) {
        throw new Error("Name is required");
      }

      if (!formData.phone?.trim()) {
        throw new Error("Phone number is required");
      }

      if (!formData.idnumber?.trim()) {
        throw new Error("ID number is required");
      }

      if (!formData.purpose?.trim()) {
        throw new Error("Purpose of visit is required");
      }

      if (!formData.department?.trim()) {
        throw new Error("Department is required");
      }

      if (!formData.visitingperson?.trim()) {
        throw new Error("Person to visit is required");
      }

      if (!termsAccepted) {
        throw new Error("You must accept the terms and conditions");
      }

      // Create the entry object based on form data
      const entryData = {
        premise_id: premise_id,
        name: formData.name?.trim(),
        phone: formData.phone?.trim(),
        idnumber: formData.idnumber?.trim(),
        email: formData.email?.trim(),
        purpose: formData.purpose?.trim(),
        department: formData.department?.trim(),
        visitingperson: formData.visitingperson?.trim(),
        vehicle: formData.vehicle?.trim() || null,
        authenticated: isAuthenticated,
        user_id: isAuthenticated ? session.user.id : null,
        submitted_at: new Date().toISOString(),
        status: 'pending',
        signature: formData.signature || null
      };

      // If the user has an active visit, add that information to the entry
      if (hasActiveVisit && activeVisitId) {
        entryData.message = `Visitor has an unchecked visit (ID: ${activeVisitId})`;
      }

      // Create the entry as pending
      const { data: pendingEntry, error: pendingError } = await supabase
        .from('entries')
        .insert([entryData])
        .select()
        .single();

      if (pendingError) {
        // Check if this is a row-level security error
        if (pendingError.code === 'PGRST301' || pendingError.message?.includes('row-level security')) {
          throw new Error("Permission denied. Please make sure you are logged in and have the necessary permissions.");
        }
        throw pendingError;
      }

      // Show normal pending modal to visitor
      setVisitorId(pendingEntry.id);
      setVisitorStatus('pending');
      setShowPendingModal(true);

    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Unable to submit entry request",
        variant: "destructive"
      });
    } finally {
      setSubmitting(false);
    }
  };

  const handleSignUp = async () => {
    try {
      // Get email and password from user
      const email = formData.email;
      if (!email) {
        toast({
          title: "Email Required",
          description: "Please provide an email address to create an account.",
          variant: "destructive"
        });
        return;
      }

      // Generate a magic link instead of password
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/complete-profile`,
        },
      });

      if (error) throw error;

      toast({
        title: "Check Your Email",
        description: "We've sent you a magic link to complete your account setup.",
      });

      // Save the visitor details to profiles table
      const { error: profileError } = await supabase
        .from('profiles')
        .insert([{
          full_name: formData.name,
          email: email,
          phone: formData.phone,
          created_at: new Date().toISOString(),
        }]);

      if (profileError) throw profileError;

    } catch (error: any) {
      console.error('Error:', error);
    }
  };

  // Render form fields dynamically based on premise settings and user auth status
  const renderFormFields = () => {
    return premiseFields
      .filter(field => field.visible)
      .map(field => {
        const value = formData[field.name] || '';
        const isPreFilled = isAuthenticated && value !== '';
        
        return (
          <div key={field.id} className="space-y-2">
            <label htmlFor={field.name} className="text-sm font-medium text-white/80 flex items-center justify-between">
              <span>
                {field.label} {field.required && <span className="text-red-500">*</span>}
              </span>
              {isPreFilled && (
                <span className="text-xs text-green-500 flex items-center">
                  <Check className="h-3 w-3 mr-1" />
                  Pre-filled
                </span>
              )}
            </label>
            <Input
              id={field.name}
              name={field.name}
              type={field.name === 'phone' ? 'tel' : field.name === 'email' ? 'email' : 'text'}
              value={value}
              onChange={(e) => {
                setFormData(prev => ({ ...prev, [field.name]: e.target.value }))
              }}
              onBlur={(e) => {
                // Validate phone number format on blur
                if (field.name === 'phone') {
                  const phoneValue = e.target.value.replace(/\D/g, '');
                  setFormData(prev => ({ ...prev, [field.name]: phoneValue }));
                }
              }}
              required={field.required}
              className={`bg-white/5 border-white/10 ${isPreFilled ? 'border-green-500/50' : ''}`}
              placeholder={`Enter your ${field.label.toLowerCase()}`}
            />
            {isPreFilled && field.required && (
              <p className="text-xs text-white/50">
                You can update this pre-filled information if needed
              </p>
            )}
          </div>
        );
      });
  };

  // Render the awaiting approval or status screen
  const renderStatusScreen = () => {
    if (visitorStatus === 'pending') {
      return (
        <div className="space-y-6">
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle className="text-2xl text-center">Awaiting Approval</CardTitle>
              <CardDescription className="text-center flex items-center justify-center">
                <Clock className="animate-spin mr-2" />
                Your entry request is being reviewed
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-white/70">Please wait while the premise administrator reviews your entry request.</p>
              
              {hasActiveVisit && (
                <div className="mt-4 p-3 bg-yellow-500/20 rounded-md border border-yellow-500/30">
                  <p className="text-yellow-200 text-sm">
                    Note: You have an active visit that needs to be checked out. The administrator will handle this.
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Sign up prompt */}
          {!isAuthenticated && (
            <Card className="w-full max-w-lg bg-gradient-to-br from-blue-600/20 to-purple-600/20 border-blue-500/50">
              <CardHeader>
                <CardTitle className="text-xl text-center flex items-center justify-center gap-2">
                  <Zap className="text-yellow-500" />
                  Quick Check-in Feature
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-start space-x-4 p-4 bg-white/5 rounded-lg">
                  <div className="flex-shrink-0">
                    <UserPlus className="h-6 w-6 text-blue-400" />
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium mb-2">Create an Account for Faster Check-ins</h4>
                    <p className="text-sm text-white/70 mb-4">
                      Save your details now and enjoy single-click check-ins at any premise! No more filling out forms repeatedly.
                    </p>
                    <ul className="text-sm space-y-2 mb-4">
                      <li className="flex items-center gap-2">
                        <Check className="h-4 w-4 text-green-500" />
                        Instant check-ins at any premise
                      </li>
                      <li className="flex items-center gap-2">
                        <Check className="h-4 w-4 text-green-500" />
                        Your details are securely stored
                      </li>
                      <li className="flex items-center gap-2">
                        <Check className="h-4 w-4 text-green-500" />
                        View your visit history
                      </li>
                    </ul>
                    <Button 
                      className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
                      onClick={() => handleSignUp()}
                    >
                      Create Account with Current Details
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      );
    }

    if (visitorStatus === 'approved') {
      return (
        <Card className="w-full max-w-lg">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-green-500">Entry Approved</CardTitle>
            <CardDescription className="text-center flex items-center justify-center">
              <Check className="text-green-500 mr-2" />
              You may proceed
            </CardDescription>
          </CardHeader>
        </Card>
      );
    }

    if (visitorStatus === 'denied') {
      return (
        <Card className="w-full max-w-lg">
          <CardHeader>
            <CardTitle className="text-2xl text-center text-red-500">Entry Denied</CardTitle>
            <CardDescription className="text-center flex items-center justify-center">
              <XCircle className="text-red-500 mr-2" />
              Your entry request was denied
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-white/70 text-center">
              Reason: {denialReason || "No reason provided"}
            </p>
          </CardContent>
        </Card>
      );
    }

    return null;
  };

  if (isLoading) {
    return (
      <MainLayout>
        <div className="flex flex-col items-center justify-center min-h-screen">
          <div className="text-lg text-white/70">Loading premise information...</div>
        </div>
      </MainLayout>
    );
  }

  if (!premiseFields.length) {
    return (
      <MainLayout>
        <div className="flex flex-col items-center justify-center min-h-screen">
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle className="text-2xl text-center">Invalid QR Code</CardTitle>
              <CardDescription className="text-center">
                This QR code is invalid or the premise does not exist.
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </MainLayout>
    );
  }

  if (error) {
    return (
      <MainLayout>
        <div className="flex flex-col items-center justify-center min-h-screen">
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle className="text-2xl text-center text-red-600">Error</CardTitle>
              <CardDescription className="text-center">
                {error}
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout>
      <div className="flex flex-col items-center justify-center min-h-screen">
        {visitorStatus ? (
          renderStatusScreen()
        ) : (
          <Card className="w-full max-w-lg">
            <CardHeader>
              <CardTitle className="text-2xl text-center">Visitor Check-In</CardTitle>
              <CardDescription className="text-center">
                Welcome to {premise?.name}! Please fill in your details to check in.
              </CardDescription>
              {hasActiveVisit && (
                <div className="mt-4 p-3 bg-yellow-500/20 rounded-md border border-yellow-500/30">
                  <p className="text-yellow-200 text-sm font-medium">
                    Note: You have an active visit at this premise that hasn't been checked out.
                  </p>
                  <p className="text-yellow-200/80 text-xs mt-1">
                    Your new check-in request will be processed after reviewing your previous visit.
                  </p>
                </div>
              )}
            </CardHeader>
            <form onSubmit={handleSubmit} className="space-y-6 px-6 pb-6">
              {/* Form fields */}
              {renderFormFields()}

              {/* Required agreements */}
              <div className="space-y-4">
                <div className="flex items-start space-x-2">
                  <Checkbox 
                    id="terms" 
                    checked={termsAccepted && privacyAccepted}
                    onCheckedChange={(checked) => {
                      setTermsAccepted(checked as boolean);
                      setPrivacyAccepted(checked as boolean);
                    }}
                    required
                    className="mt-1"
                  />
                  <Label htmlFor="terms" className="text-sm font-normal">
                    By proceeding, I acknowledge that I have read, understood, and agree to the{' '}
                    <a href="#" className="text-blue-500 hover:text-blue-400">Terms of Service</a>{' '}
                    and{' '}
                    <a href="#" className="text-blue-500 hover:text-blue-400">Privacy Policy</a>
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="signature" 
                    checked={signatureGenerated}
                    onCheckedChange={(checked) => setSignatureGenerated(checked as boolean)}
                    required
                  />
                  <Label htmlFor="signature" className="text-sm font-normal">
                    I agree to have my digital signature generated for entry
                  </Label>
                </div>
              </div>

              <Button type="submit" disabled={submitting} className="w-full">
                {submitting ? "Submitting..." : "Submit Entry Request"}
              </Button>
            </form>
          </Card>
        )}
        {showPendingModal && (
          <Dialog open={showPendingModal} onOpenChange={setShowPendingModal}>
            <DialogContent>
              <DialogTitle>Entry Request Pending</DialogTitle>
              <div className="space-y-4 text-center">
                <p>Your entry request has been submitted and is pending approval.</p>
                {hasActiveVisit && (
                  <div className="p-3 bg-yellow-500/20 rounded-md border border-yellow-500/30 text-left">
                    <p className="text-yellow-200 text-sm font-medium">
                      Your previous visit will need to be checked out by the administrator.
                    </p>
                  </div>
                )}
                {isAuthenticated ? (
                  <p>You will be notified when your request is approved.</p>
                ) : (
                  <p>Please check with the reception for approval status.</p>
                )}
              </div>
              <DialogFooter>
                <Button onClick={() => {
                  setShowPendingModal(false);
                  navigate('/');
                }}>
                  Close
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </MainLayout>
  );
};

export default VisitorEntry;
